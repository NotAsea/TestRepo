// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TestRepo.Data.CompiledModels
{
    public partial class MyAppContextModel
    {
        partial void Initialize()
        {
            var account = AccountEntityType.Create(this);
            var person = PersonEntityType.Create(this);

            AccountEntityType.CreateAnnotations(account);
            PersonEntityType.CreateAnnotations(person);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "8.0.0");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var account = FindEntityType("TestRepo.Data.Entities.Account")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            account.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var testRepoDataEntitiesAccountTableBase = new TableBase("TestRepo.Data.Entities.Account", null, relationalModel);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "integer", testRepoDataEntitiesAccountTableBase);
            testRepoDataEntitiesAccountTableBase.Columns.Add("Id", idColumnBase);
            var isDeletedColumnBase = new ColumnBase<ColumnMappingBase>("IsDeleted", "boolean", testRepoDataEntitiesAccountTableBase);
            testRepoDataEntitiesAccountTableBase.Columns.Add("IsDeleted", isDeletedColumnBase);
            var passwordColumnBase = new ColumnBase<ColumnMappingBase>("Password", "character varying(500)", testRepoDataEntitiesAccountTableBase);
            testRepoDataEntitiesAccountTableBase.Columns.Add("Password", passwordColumnBase);
            var personIdColumnBase = new ColumnBase<ColumnMappingBase>("PersonId", "integer", testRepoDataEntitiesAccountTableBase);
            testRepoDataEntitiesAccountTableBase.Columns.Add("PersonId", personIdColumnBase);
            var userNameColumnBase = new ColumnBase<ColumnMappingBase>("UserName", "character varying(100)", testRepoDataEntitiesAccountTableBase);
            testRepoDataEntitiesAccountTableBase.Columns.Add("UserName", userNameColumnBase);
            relationalModel.DefaultTables.Add("TestRepo.Data.Entities.Account", testRepoDataEntitiesAccountTableBase);
            var testRepoDataEntitiesAccountMappingBase = new TableMappingBase<ColumnMappingBase>(account, testRepoDataEntitiesAccountTableBase, true);
            testRepoDataEntitiesAccountTableBase.AddTypeMapping(testRepoDataEntitiesAccountMappingBase, false);
            defaultTableMappings.Add(testRepoDataEntitiesAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, account.FindProperty("Id")!, testRepoDataEntitiesAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isDeletedColumnBase, account.FindProperty("IsDeleted")!, testRepoDataEntitiesAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)passwordColumnBase, account.FindProperty("Password")!, testRepoDataEntitiesAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)personIdColumnBase, account.FindProperty("PersonId")!, testRepoDataEntitiesAccountMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userNameColumnBase, account.FindProperty("UserName")!, testRepoDataEntitiesAccountMappingBase);

            var tableMappings = new List<TableMapping>();
            account.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var accountsTable = new Table("Accounts", null, relationalModel);
            var idColumn = new Column("Id", "integer", accountsTable);
            accountsTable.Columns.Add("Id", idColumn);
            idColumn.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var isDeletedColumn = new Column("IsDeleted", "boolean", accountsTable);
            accountsTable.Columns.Add("IsDeleted", isDeletedColumn);
            var passwordColumn = new Column("Password", "character varying(500)", accountsTable);
            accountsTable.Columns.Add("Password", passwordColumn);
            var personIdColumn = new Column("PersonId", "integer", accountsTable);
            accountsTable.Columns.Add("PersonId", personIdColumn);
            var userNameColumn = new Column("UserName", "character varying(100)", accountsTable);
            accountsTable.Columns.Add("UserName", userNameColumn);
            var pK_Accounts = new UniqueConstraint("PK_Accounts", accountsTable, new[] { idColumn });
            accountsTable.PrimaryKey = pK_Accounts;
            var pK_AccountsUc = RelationalModel.GetKey(this,
                "TestRepo.Data.Entities.Account",
                new[] { "Id" });
            pK_Accounts.MappedKeys.Add(pK_AccountsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AccountsUc).Add(pK_Accounts);
            accountsTable.UniqueConstraints.Add("PK_Accounts", pK_Accounts);
            relationalModel.Tables.Add(("Accounts", null), accountsTable);
            var accountsTableMapping = new TableMapping(account, accountsTable, true);
            accountsTable.AddTypeMapping(accountsTableMapping, false);
            tableMappings.Add(accountsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, account.FindProperty("Id")!, accountsTableMapping);
            RelationalModel.CreateColumnMapping(isDeletedColumn, account.FindProperty("IsDeleted")!, accountsTableMapping);
            RelationalModel.CreateColumnMapping(passwordColumn, account.FindProperty("Password")!, accountsTableMapping);
            RelationalModel.CreateColumnMapping(personIdColumn, account.FindProperty("PersonId")!, accountsTableMapping);
            RelationalModel.CreateColumnMapping(userNameColumn, account.FindProperty("UserName")!, accountsTableMapping);

            var person = FindEntityType("TestRepo.Data.Entities.Person")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            person.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var testRepoDataEntitiesPersonTableBase = new TableBase("TestRepo.Data.Entities.Person", null, relationalModel);
            var createdDateColumnBase = new ColumnBase<ColumnMappingBase>("CreatedDate", "timestamp with time zone", testRepoDataEntitiesPersonTableBase);
            testRepoDataEntitiesPersonTableBase.Columns.Add("CreatedDate", createdDateColumnBase);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "character varying(200)", testRepoDataEntitiesPersonTableBase)
            {
                IsNullable = true
            };
            testRepoDataEntitiesPersonTableBase.Columns.Add("Description", descriptionColumnBase);
            var emailColumnBase = new ColumnBase<ColumnMappingBase>("Email", "character varying(150)", testRepoDataEntitiesPersonTableBase)
            {
                IsNullable = true
            };
            testRepoDataEntitiesPersonTableBase.Columns.Add("Email", emailColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "integer", testRepoDataEntitiesPersonTableBase);
            testRepoDataEntitiesPersonTableBase.Columns.Add("Id", idColumnBase0);
            var isDeletedColumnBase0 = new ColumnBase<ColumnMappingBase>("IsDeleted", "boolean", testRepoDataEntitiesPersonTableBase);
            testRepoDataEntitiesPersonTableBase.Columns.Add("IsDeleted", isDeletedColumnBase0);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "character varying(100)", testRepoDataEntitiesPersonTableBase);
            testRepoDataEntitiesPersonTableBase.Columns.Add("Name", nameColumnBase);
            relationalModel.DefaultTables.Add("TestRepo.Data.Entities.Person", testRepoDataEntitiesPersonTableBase);
            var testRepoDataEntitiesPersonMappingBase = new TableMappingBase<ColumnMappingBase>(person, testRepoDataEntitiesPersonTableBase, true);
            testRepoDataEntitiesPersonTableBase.AddTypeMapping(testRepoDataEntitiesPersonMappingBase, false);
            defaultTableMappings0.Add(testRepoDataEntitiesPersonMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, person.FindProperty("Id")!, testRepoDataEntitiesPersonMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdDateColumnBase, person.FindProperty("CreatedDate")!, testRepoDataEntitiesPersonMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, person.FindProperty("Description")!, testRepoDataEntitiesPersonMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailColumnBase, person.FindProperty("Email")!, testRepoDataEntitiesPersonMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isDeletedColumnBase0, person.FindProperty("IsDeleted")!, testRepoDataEntitiesPersonMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, person.FindProperty("Name")!, testRepoDataEntitiesPersonMappingBase);

            var tableMappings0 = new List<TableMapping>();
            person.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var personsTable = new Table("Persons", null, relationalModel);
            var idColumn0 = new Column("Id", "integer", personsTable);
            personsTable.Columns.Add("Id", idColumn0);
            idColumn0.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            var createdDateColumn = new Column("CreatedDate", "timestamp with time zone", personsTable);
            personsTable.Columns.Add("CreatedDate", createdDateColumn);
            var descriptionColumn = new Column("Description", "character varying(200)", personsTable)
            {
                IsNullable = true
            };
            personsTable.Columns.Add("Description", descriptionColumn);
            var emailColumn = new Column("Email", "character varying(150)", personsTable)
            {
                IsNullable = true
            };
            personsTable.Columns.Add("Email", emailColumn);
            var isDeletedColumn0 = new Column("IsDeleted", "boolean", personsTable);
            personsTable.Columns.Add("IsDeleted", isDeletedColumn0);
            var nameColumn = new Column("Name", "character varying(100)", personsTable);
            personsTable.Columns.Add("Name", nameColumn);
            var pK_Persons = new UniqueConstraint("PK_Persons", personsTable, new[] { idColumn0 });
            personsTable.PrimaryKey = pK_Persons;
            var pK_PersonsUc = RelationalModel.GetKey(this,
                "TestRepo.Data.Entities.Person",
                new[] { "Id" });
            pK_Persons.MappedKeys.Add(pK_PersonsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PersonsUc).Add(pK_Persons);
            personsTable.UniqueConstraints.Add("PK_Persons", pK_Persons);
            relationalModel.Tables.Add(("Persons", null), personsTable);
            var personsTableMapping = new TableMapping(person, personsTable, true);
            personsTable.AddTypeMapping(personsTableMapping, false);
            tableMappings0.Add(personsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, person.FindProperty("Id")!, personsTableMapping);
            RelationalModel.CreateColumnMapping(createdDateColumn, person.FindProperty("CreatedDate")!, personsTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, person.FindProperty("Description")!, personsTableMapping);
            RelationalModel.CreateColumnMapping(emailColumn, person.FindProperty("Email")!, personsTableMapping);
            RelationalModel.CreateColumnMapping(isDeletedColumn0, person.FindProperty("IsDeleted")!, personsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, person.FindProperty("Name")!, personsTableMapping);
            return relationalModel.MakeReadOnly();
        }
    }
}
